//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum_key_distribution\",\"Name\":\"generateBinary\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\Gabriel\\\\Desktop\\\\Quantum-Algorithm-Implementations\\\\Quantum Key Distribution\\\\QSharp Code\\\\Quantum Key Distribution Qsharp.qs\",\"Position\":{\"Item1\":12,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":25}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"len\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":26},\"Item2\":{\"Line\":1,\"Column\":29}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"Int\"},\"ReturnType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum_key_distribution\",\"Name\":\"generateBinary\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\Gabriel\\\\Desktop\\\\Quantum-Algorithm-Implementations\\\\Quantum Key Distribution\\\\QSharp Code\\\\Quantum Key Distribution Qsharp.qs\",\"Position\":{\"Item1\":12,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":25}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum_key_distribution\",\"Name\":\"encodeMessage\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\Gabriel\\\\Desktop\\\\Quantum-Algorithm-Implementations\\\\Quantum Key Distribution\\\\QSharp Code\\\\Quantum Key Distribution Qsharp.qs\",\"Position\":{\"Item1\":20,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"bits\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":25},\"Item2\":{\"Line\":1,\"Column\":29}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"bases\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":38},\"Item2\":{\"Line\":1,\"Column\":43}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"messageLen\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":52},\"Item2\":{\"Line\":1,\"Column\":62}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"qubits\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":69},\"Item2\":{\"Line\":1,\"Column\":75}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},{\"Case\":\"Int\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum_key_distribution\",\"Name\":\"encodeMessage\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\Gabriel\\\\Desktop\\\\Quantum-Algorithm-Implementations\\\\Quantum Key Distribution\\\\QSharp Code\\\\Quantum Key Distribution Qsharp.qs\",\"Position\":{\"Item1\":20,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum_key_distribution\",\"Name\":\"measureMessage\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\Gabriel\\\\Desktop\\\\Quantum-Algorithm-Implementations\\\\Quantum Key Distribution\\\\QSharp Code\\\\Quantum Key Distribution Qsharp.qs\",\"Position\":{\"Item1\":38,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":25}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"message\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":26},\"Item2\":{\"Line\":1,\"Column\":33}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"bases\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":44},\"Item2\":{\"Line\":1,\"Column\":49}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"messageLen\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":58},\"Item2\":{\"Line\":1,\"Column\":68}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum_key_distribution\",\"Name\":\"measureMessage\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\Gabriel\\\\Desktop\\\\Quantum-Algorithm-Implementations\\\\Quantum Key Distribution\\\\QSharp Code\\\\Quantum Key Distribution Qsharp.qs\",\"Position\":{\"Item1\":38,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":25}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum_key_distribution\",\"Name\":\"removeGarbage\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\Gabriel\\\\Desktop\\\\Quantum-Algorithm-Implementations\\\\Quantum Key Distribution\\\\QSharp Code\\\\Quantum Key Distribution Qsharp.qs\",\"Position\":{\"Item1\":61,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"a_bases\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":25},\"Item2\":{\"Line\":1,\"Column\":32}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"b_bases\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":41},\"Item2\":{\"Line\":1,\"Column\":48}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"bits\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":57},\"Item2\":{\"Line\":1,\"Column\":61}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"messageLen\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":70},\"Item2\":{\"Line\":1,\"Column\":80}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum_key_distribution\",\"Name\":\"removeGarbage\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\Gabriel\\\\Desktop\\\\Quantum-Algorithm-Implementations\\\\Quantum Key Distribution\\\\QSharp Code\\\\Quantum Key Distribution Qsharp.qs\",\"Position\":{\"Item1\":61,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum_key_distribution\",\"Name\":\"sampleBits\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\Gabriel\\\\Desktop\\\\Quantum-Algorithm-Implementations\\\\Quantum Key Distribution\\\\QSharp Code\\\\Quantum Key Distribution Qsharp.qs\",\"Position\":{\"Item1\":71,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":21}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"bits\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":22},\"Item2\":{\"Line\":1,\"Column\":26}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"selection\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":35},\"Item2\":{\"Line\":1,\"Column\":44}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]}]]},\"ReturnType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum_key_distribution\",\"Name\":\"sampleBits\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\Gabriel\\\\Desktop\\\\Quantum-Algorithm-Implementations\\\\Quantum Key Distribution\\\\QSharp Code\\\\Quantum Key Distribution Qsharp.qs\",\"Position\":{\"Item1\":71,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":21}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum_key_distribution\",\"Name\":\"IntArrayAsString\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\Gabriel\\\\Desktop\\\\Quantum-Algorithm-Implementations\\\\Quantum Key Distribution\\\\QSharp Code\\\\Quantum Key Distribution Qsharp.qs\",\"Position\":{\"Item1\":84,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":27}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"intArray\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":28},\"Item2\":{\"Line\":1,\"Column\":36}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"ReturnType\":{\"Case\":\"String\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum_key_distribution\",\"Name\":\"IntArrayAsString\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\Gabriel\\\\Desktop\\\\Quantum-Algorithm-Implementations\\\\Quantum Key Distribution\\\\QSharp Code\\\\Quantum Key Distribution Qsharp.qs\",\"Position\":{\"Item1\":84,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":27}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum_key_distribution\",\"Name\":\"runQKD\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\Gabriel\\\\Desktop\\\\Quantum-Algorithm-Implementations\\\\Quantum Key Distribution\\\\QSharp Code\\\\Quantum Key Distribution Qsharp.qs\",\"Position\":{\"Item1\":93,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":17}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum_key_distribution\",\"Name\":\"runQKD\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\Gabriel\\\\Desktop\\\\Quantum-Algorithm-Implementations\\\\Quantum Key Distribution\\\\QSharp Code\\\\Quantum Key Distribution Qsharp.qs\",\"Position\":{\"Item1\":93,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":17}},\"Documentation\":[]}")]
#line hidden
namespace Quantum_key_distribution
{
    [SourceLocation("C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs", OperationFunctor.Body, 13, 21)]
    public partial class generateBinary : Operation<Int64, IQArray<Int64>>, ICallable
    {
        public generateBinary(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "generateBinary";
        String ICallable.FullName => "Quantum_key_distribution.generateBinary";
        protected ICallable<(Int64,Int64), Int64> Microsoft__Quantum__Random__DrawRandomInt
        {
            get;
            set;
        }

        public override Func<Int64, IQArray<Int64>> __Body__ => (__in__) =>
        {
            var len = __in__;
#line 14 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
            var binArray = QArray<Int64>.Create(0L);
#line 15 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
            foreach (var index in new QRange(0L, (len - 1L)))
#line hidden
            {
#line 16 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
                binArray = QArray<Int64>.Add(binArray, new QArray<Int64>(Microsoft__Quantum__Random__DrawRandomInt.Apply((0L, 1L))));
            }

#line 18 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
            return binArray;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Random__DrawRandomInt = this.__Factory__.Get<ICallable<(Int64,Int64), Int64>>(typeof(global::Microsoft.Quantum.Random.DrawRandomInt));
        }

        public override IApplyData __DataIn__(Int64 data) => new QTuple<Int64>(data);
        public override IApplyData __DataOut__(IQArray<Int64> data) => data;
        public static System.Threading.Tasks.Task<IQArray<Int64>> Run(IOperationFactory __m__, Int64 len)
        {
            return __m__.Run<generateBinary, Int64, IQArray<Int64>>(len);
        }
    }

    [SourceLocation("C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs", OperationFunctor.Body, 21, 39)]
    public partial class encodeMessage : Operation<(IQArray<Int64>,IQArray<Int64>,Int64,IQArray<Qubit>), QVoid>, ICallable
    {
        public encodeMessage(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Int64>,IQArray<Int64>,Int64,IQArray<Qubit>)>, IApplyData
        {
            public In((IQArray<Int64>,IQArray<Int64>,Int64,IQArray<Qubit>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return ((IApplyData)Data.Item4)?.Qubits;
                }
            }
        }

        String ICallable.Name => "encodeMessage";
        String ICallable.FullName => "Quantum_key_distribution.encodeMessage";
        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        public override Func<(IQArray<Int64>,IQArray<Int64>,Int64,IQArray<Qubit>), QVoid> __Body__ => (__in__) =>
        {
            var (bits,bases,messageLen,qubits) = __in__;
#line 22 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
            foreach (var i in new QRange(0L, (messageLen - 1L)))
#line hidden
            {
#line 23 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
                if ((bases[i] == 0L))
                {
#line 24 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
                    if ((bits[i] == 0L))
                    {
                    }
                    else
                    {
#line 26 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
                        Microsoft__Quantum__Intrinsic__X.Apply(qubits[i]);
                    }
                }
                else
                {
#line 29 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
                    if ((bits[i] == 0L))
                    {
#line 30 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
                        Microsoft__Quantum__Intrinsic__H.Apply(qubits[i]);
                    }
                    else
                    {
#line 32 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
                        Microsoft__Quantum__Intrinsic__X.Apply(qubits[i]);
#line 33 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
                        Microsoft__Quantum__Intrinsic__H.Apply(qubits[i]);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
        }

        public override IApplyData __DataIn__((IQArray<Int64>,IQArray<Int64>,Int64,IQArray<Qubit>) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Int64> bits, IQArray<Int64> bases, Int64 messageLen, IQArray<Qubit> qubits)
        {
            return __m__.Run<encodeMessage, (IQArray<Int64>,IQArray<Int64>,Int64,IQArray<Qubit>), QVoid>((bits, bases, messageLen, qubits));
        }
    }

    [SourceLocation("C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs", OperationFunctor.Body, 39, 62)]
    public partial class measureMessage : Operation<(IQArray<Qubit>,IQArray<Int64>,Int64), IQArray<Int64>>, ICallable
    {
        public measureMessage(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,IQArray<Int64>,Int64)>, IApplyData
        {
            public In((IQArray<Qubit>,IQArray<Int64>,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return ((IApplyData)Data.Item1)?.Qubits;
                }
            }
        }

        String ICallable.Name => "measureMessage";
        String ICallable.FullName => "Quantum_key_distribution.measureMessage";
        protected ICallable<Qubit, Result> Microsoft__Quantum__Intrinsic__M
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, QVoid> ResetAll__
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,IQArray<Int64>,Int64), IQArray<Int64>> __Body__ => (__in__) =>
        {
            var (message,bases,messageLen) = __in__;
#line 40 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
            var measurements = QArray<Int64>.Create(0L);
#line 41 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
            foreach (var q in new QRange(0L, (messageLen - 1L)))
#line hidden
            {
#line 42 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
                if ((bases[q] == 0L))
                {
#line 43 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
                    if ((Microsoft__Quantum__Intrinsic__M.Apply(message[q]) == Result.One))
                    {
#line 44 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
                        measurements = QArray<Int64>.Add(measurements, new QArray<Int64>(1L));
                    }
                    else
                    {
#line 46 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
                        measurements = QArray<Int64>.Add(measurements, new QArray<Int64>(0L));
                    }
                }

#line 49 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
                if ((bases[q] == 1L))
                {
#line 50 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
                    Microsoft__Quantum__Intrinsic__H.Apply(message[q]);
#line 51 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
                    if ((Microsoft__Quantum__Intrinsic__M.Apply(message[q]) == Result.One))
                    {
#line 52 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
                        measurements = QArray<Int64>.Add(measurements, new QArray<Int64>(1L));
                    }
                    else
                    {
#line 54 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
                        measurements = QArray<Int64>.Add(measurements, new QArray<Int64>(0L));
                    }
                }
            }

#line 58 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
            ResetAll__.Apply(message);
#line 59 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
            return measurements;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Intrinsic__M = this.__Factory__.Get<ICallable<Qubit, Result>>(typeof(global::Microsoft.Quantum.Intrinsic.M));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.ResetAll__ = this.__Factory__.Get<ICallable<IQArray<Qubit>, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.ResetAll));
        }

        public override IApplyData __DataIn__((IQArray<Qubit>,IQArray<Int64>,Int64) data) => new In(data);
        public override IApplyData __DataOut__(IQArray<Int64> data) => data;
        public static System.Threading.Tasks.Task<IQArray<Int64>> Run(IOperationFactory __m__, IQArray<Qubit> message, IQArray<Int64> bases, Int64 messageLen)
        {
            return __m__.Run<measureMessage, (IQArray<Qubit>,IQArray<Int64>,Int64), IQArray<Int64>>((message, bases, messageLen));
        }
    }

    [SourceLocation("C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs", OperationFunctor.Body, 62, 72)]
    public partial class removeGarbage : Operation<(IQArray<Int64>,IQArray<Int64>,IQArray<Int64>,Int64), IQArray<Int64>>, ICallable
    {
        public removeGarbage(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Int64>,IQArray<Int64>,IQArray<Int64>,Int64)>, IApplyData
        {
            public In((IQArray<Int64>,IQArray<Int64>,IQArray<Int64>,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "removeGarbage";
        String ICallable.FullName => "Quantum_key_distribution.removeGarbage";
        public override Func<(IQArray<Int64>,IQArray<Int64>,IQArray<Int64>,Int64), IQArray<Int64>> __Body__ => (__in__) =>
        {
            var (a_bases,b_bases,bits,messageLen) = __in__;
#line 63 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
            var good_bits = QArray<Int64>.Create(0L);
#line 64 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
            foreach (var q in new QRange(0L, (messageLen - 1L)))
#line hidden
            {
#line 65 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
                if ((a_bases[q] == b_bases[q]))
                {
#line 66 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
                    good_bits = QArray<Int64>.Add(good_bits, new QArray<Int64>(bits[q]));
                }
            }

#line 69 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
            return good_bits;
        }

        ;
        public override void __Init__()
        {
        }

        public override IApplyData __DataIn__((IQArray<Int64>,IQArray<Int64>,IQArray<Int64>,Int64) data) => new In(data);
        public override IApplyData __DataOut__(IQArray<Int64> data) => data;
        public static System.Threading.Tasks.Task<IQArray<Int64>> Run(IOperationFactory __m__, IQArray<Int64> a_bases, IQArray<Int64> b_bases, IQArray<Int64> bits, Int64 messageLen)
        {
            return __m__.Run<removeGarbage, (IQArray<Int64>,IQArray<Int64>,IQArray<Int64>,Int64), IQArray<Int64>>((a_bases, b_bases, bits, messageLen));
        }
    }

    [SourceLocation("C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs", OperationFunctor.Body, 72, 85)]
    public partial class sampleBits : Operation<(IQArray<Int64>,IQArray<Int64>), IQArray<Int64>>, ICallable
    {
        public sampleBits(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Int64>,IQArray<Int64>)>, IApplyData
        {
            public In((IQArray<Int64>,IQArray<Int64>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "sampleBits";
        String ICallable.FullName => "Quantum_key_distribution.sampleBits";
        protected ICallable<String, QVoid> Message__
        {
            get;
            set;
        }

        protected ICallable<Int64, String> Microsoft__Quantum__Convert__IntAsString
        {
            get;
            set;
        }

        protected ICallable Length__
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64), Int64> Microsoft__Quantum__Math__ModI
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Arrays__Exclude
        {
            get;
            set;
        }

        public override Func<(IQArray<Int64>,IQArray<Int64>), IQArray<Int64>> __Body__ => (__in__) =>
        {
            var (bits,selection) = __in__;
#line 73 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
            var bitsArr = new QArray<Int64>(bits);
#line 74 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
            var sample = QArray<Int64>.Create(0L);
#line 75 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
            foreach (var i in selection)
#line hidden
            {
#line 76 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
                Message__.Apply(Microsoft__Quantum__Convert__IntAsString.Apply(i));
#line 77 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
                Message__.Apply(Microsoft__Quantum__Convert__IntAsString.Apply(bitsArr.Length));
#line 78 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
                var popVal = Microsoft__Quantum__Math__ModI.Apply((i, bitsArr.Length));
#line 79 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
                sample = QArray<Int64>.Add(sample, new QArray<Int64>(bitsArr[popVal]));
#line 80 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
                bitsArr = new QArray<Int64>(Microsoft__Quantum__Arrays__Exclude.Apply<IQArray<Int64>>((new QArray<Int64>(popVal), bitsArr?.Copy())));
            }

#line 82 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
            return sample;
        }

        ;
        public override void __Init__()
        {
            this.Message__ = this.__Factory__.Get<ICallable<String, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Message));
            this.Microsoft__Quantum__Convert__IntAsString = this.__Factory__.Get<ICallable<Int64, String>>(typeof(global::Microsoft.Quantum.Convert.IntAsString));
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.Microsoft__Quantum__Math__ModI = this.__Factory__.Get<ICallable<(Int64,Int64), Int64>>(typeof(global::Microsoft.Quantum.Math.ModI));
            this.Microsoft__Quantum__Arrays__Exclude = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.Exclude<>));
        }

        public override IApplyData __DataIn__((IQArray<Int64>,IQArray<Int64>) data) => new In(data);
        public override IApplyData __DataOut__(IQArray<Int64> data) => data;
        public static System.Threading.Tasks.Task<IQArray<Int64>> Run(IOperationFactory __m__, IQArray<Int64> bits, IQArray<Int64> selection)
        {
            return __m__.Run<sampleBits, (IQArray<Int64>,IQArray<Int64>), IQArray<Int64>>((bits, selection));
        }
    }

    [SourceLocation("C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs", OperationFunctor.Body, 85, 94)]
    public partial class IntArrayAsString : Operation<IQArray<Int64>, String>, ICallable
    {
        public IntArrayAsString(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "IntArrayAsString";
        String ICallable.FullName => "Quantum_key_distribution.IntArrayAsString";
        protected ICallable<Int64, String> Microsoft__Quantum__Convert__IntAsString
        {
            get;
            set;
        }

        public override Func<IQArray<Int64>, String> __Body__ => (__in__) =>
        {
            var intArray = __in__;
#line 86 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
            var buildString = "";
#line 87 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
            foreach (var i in intArray)
#line hidden
            {
#line 88 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
                buildString = (buildString + Microsoft__Quantum__Convert__IntAsString.Apply(i));
            }

#line 90 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
            return buildString;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Convert__IntAsString = this.__Factory__.Get<ICallable<Int64, String>>(typeof(global::Microsoft.Quantum.Convert.IntAsString));
        }

        public override IApplyData __DataIn__(IQArray<Int64> data) => data;
        public override IApplyData __DataOut__(String data) => new QTuple<String>(data);
        public static System.Threading.Tasks.Task<String> Run(IOperationFactory __m__, IQArray<Int64> intArray)
        {
            return __m__.Run<IntArrayAsString, IQArray<Int64>, String>(intArray);
        }
    }

    [SourceLocation("C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs", OperationFunctor.Body, 94, -1)]
    public partial class runQKD : Operation<QVoid, QVoid>, ICallable
    {
        public runQKD(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "runQKD";
        String ICallable.FullName => "Quantum_key_distribution.runQKD";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable<Int64, IQArray<Int64>> generateBinary__
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Int64>,IQArray<Int64>,Int64,IQArray<Qubit>), QVoid> encodeMessage__
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Qubit>,IQArray<Int64>,Int64), IQArray<Int64>> measureMessage__
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Int64>,IQArray<Int64>,IQArray<Int64>,Int64), IQArray<Int64>> removeGarbage__
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Int64>,IQArray<Int64>), IQArray<Int64>> sampleBits__
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> Message__
        {
            get;
            set;
        }

        protected ICallable<IQArray<Int64>, String> IntArrayAsString__
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 95 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
            var messageLen = 25L;
#line hidden
            {
#line 96 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
                var qubits = Allocate__.Apply(messageLen);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 99 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
                    var alice_bits = (IQArray<Int64>)generateBinary__.Apply(messageLen);
#line 104 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
                    var alice_bases = (IQArray<Int64>)generateBinary__.Apply(messageLen);
#line 105 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
                    encodeMessage__.Apply((alice_bits, alice_bases, messageLen, qubits));
#line 109 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
                    var bob_bases = (IQArray<Int64>)generateBinary__.Apply(messageLen);
#line 110 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
                    var bob_results = (IQArray<Int64>)measureMessage__.Apply((qubits, bob_bases, messageLen));
#line 113 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
                    var alice_key = (IQArray<Int64>)removeGarbage__.Apply((alice_bases, bob_bases, alice_bits, messageLen));
#line 114 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
                    var bob_key = (IQArray<Int64>)removeGarbage__.Apply((alice_bases, bob_bases, bob_results, messageLen));
#line 117 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
                    var sample_size = 10L;
#line 118 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
                    var bit_selection = (IQArray<Int64>)generateBinary__.Apply(sample_size);
#line 120 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
                    var bob_sample = (IQArray<Int64>)sampleBits__.Apply((bob_key, bit_selection));
#line 121 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
                    Message__.Apply(("  bob_sample = " + IntArrayAsString__.Apply(bob_sample)));
#line 122 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
                    var alice_sample = (IQArray<Int64>)sampleBits__.Apply((alice_key, bit_selection));
#line 123 "C:\\Users\\Gabriel\\Desktop\\Quantum-Algorithm-Implementations\\Quantum Key Distribution\\QSharp Code\\Quantum Key Distribution Qsharp.qs"
                    Message__.Apply(("alice_sample = " + IntArrayAsString__.Apply(alice_sample)));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(qubits);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.generateBinary__ = this.__Factory__.Get<ICallable<Int64, IQArray<Int64>>>(typeof(generateBinary));
            this.encodeMessage__ = this.__Factory__.Get<ICallable<(IQArray<Int64>,IQArray<Int64>,Int64,IQArray<Qubit>), QVoid>>(typeof(encodeMessage));
            this.measureMessage__ = this.__Factory__.Get<ICallable<(IQArray<Qubit>,IQArray<Int64>,Int64), IQArray<Int64>>>(typeof(measureMessage));
            this.removeGarbage__ = this.__Factory__.Get<ICallable<(IQArray<Int64>,IQArray<Int64>,IQArray<Int64>,Int64), IQArray<Int64>>>(typeof(removeGarbage));
            this.sampleBits__ = this.__Factory__.Get<ICallable<(IQArray<Int64>,IQArray<Int64>), IQArray<Int64>>>(typeof(sampleBits));
            this.Message__ = this.__Factory__.Get<ICallable<String, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Message));
            this.IntArrayAsString__ = this.__Factory__.Get<ICallable<IQArray<Int64>, String>>(typeof(IntArrayAsString));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<runQKD, QVoid, QVoid>(QVoid.Instance);
        }
    }
}